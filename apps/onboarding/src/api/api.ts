/* tslint:disable */
/* eslint-disable */
/**
 * sulsul API
 * sulsul API Restdocs
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 술에 대한 정보
 * @export
 * @interface DrinkDto
 */
export interface DrinkDto {
  /**
   * 술의 종류. 소주, 와인, 고량주, 위스키, 맥주
   * @type {string}
   * @memberof DrinkDto
   */
  drinkType: string;
  /**
   * 술 도수. 단위는 %
   * @type {number}
   * @memberof DrinkDto
   */
  alcoholPercentage: number;
  /**
   * 술병 용액 양. 단위는 ml
   * @type {number}
   * @memberof DrinkDto
   */
  bottleCapacity: number;
  /**
   * 술잔에 포함된 알코올 양. 단위는 g
   * @type {number}
   * @memberof DrinkDto
   */
  alcoholAmountPerGlass: number;
  /**
   * 술잔 용약 양. 단위는 ml
   * @type {number}
   * @memberof DrinkDto
   */
  glassCapacity: number;
}
/**
 * 주종, 주량을 나타내는 객체
 * @export
 * @interface DrinkRes
 */
export interface DrinkRes {
  /**
   * 주량등록 시 설정한 주종 이름
   * @type {string}
   * @memberof DrinkRes
   */
  drinkType: DrinkResDrinkTypeEnum;
  /**
   * 주량등록 시 설정한 잔 수
   * @type {number}
   * @memberof DrinkRes
   */
  glass: number;
}

export const DrinkResDrinkTypeEnum = {
  소주: '소주',
  와인: '와인',
  맥주: '맥주',
  위스키: '위스키',
  고량주: '고량주',
} as const;

export type DrinkResDrinkTypeEnum =
  typeof DrinkResDrinkTypeEnum[keyof typeof DrinkResDrinkTypeEnum];

/**
 * 술 종류와 잔 수
 * @export
 * @interface DrinkingAmountVO
 */
export interface DrinkingAmountVO {
  /**
   *
   * @type {string}
   * @memberof DrinkingAmountVO
   */
  drinkType: string;
  /**
   *
   * @type {number}
   * @memberof DrinkingAmountVO
   */
  glasses: number;
}
/**
 * 술약속 카드에 표현될 데이터
 * @export
 * @interface DrinkingCardDto
 */
export interface DrinkingCardDto {
  /**
   *
   * @type {string}
   * @memberof DrinkingCardDto
   */
  drinkingReportId: string;
  /**
   *
   * @type {string}
   * @memberof DrinkingCardDto
   */
  cardImageUrl: string;
  /**
   *
   * @type {Array<DrinkingResultDto>}
   * @memberof DrinkingCardDto
   */
  drinks: Array<DrinkingResultDto>;
  /**
   * ISO 8601 포맷의 날짜 데이터. e.g. 2023-07-24T04:00:00Z
   * @type {string}
   * @memberof DrinkingCardDto
   */
  drankDate: string;
  /**
   *
   * @type {string}
   * @memberof DrinkingCardDto
   */
  subTitleText: string;
}
/**
 * 주량 등록 시, response 되는 데이터
 * @export
 * @interface DrinkingLimitDto
 */
export interface DrinkingLimitDto {
  /**
   * 주종 이름을 나타내는 필드 (\'소주\', \'맥주\', \'와인\', \'고량주\',\'위스키\'
   * @type {string}
   * @memberof DrinkingLimitDto
   */
  drinkType: string;
  /**
   * 몇 잔 마셨는지를 나타내는 필드
   * @type {number}
   * @memberof DrinkingLimitDto
   */
  glass: number;
  /**
   * 유저의 주량을 알코올 양으로 표현하는 필드 (단위 g)
   * @type {number}
   * @memberof DrinkingLimitDto
   */
  totalAlcoholAmount: number;
}
/**
 *
 * @export
 * @interface DrinkingLimitListDto
 */
export interface DrinkingLimitListDto {
  /**
   *
   * @type {Array<DrinkingLimitDto>}
   * @memberof DrinkingLimitListDto
   */
  drinkList: Array<DrinkingLimitDto>;
}
/**
 * 주량등록 시 받는 Response 형식
 * @export
 * @interface DrinkingLimitRes
 */
export interface DrinkingLimitRes {
  /**
   *
   * @type {DrinkRes}
   * @memberof DrinkingLimitRes
   */
  myDrink: DrinkRes;
  /**
   * 다른 주종에 대한 주량정보
   * @type {Array<DrinkRes>}
   * @memberof DrinkingLimitRes
   */
  otherDrinks: Array<DrinkRes>;
  /**
   * 유저의 주량을 알코올 양으로 표현하는 필드 (단위 g)
   * @type {number}
   * @memberof DrinkingLimitRes
   */
  totalAlcoholAmount: number;
}
/**
 *
 * @export
 * @interface DrinkingMeasurementReq
 */
export interface DrinkingMeasurementReq {
  /**
   * 술 종류와 잔 수
   * @type {Array<DrinkingAmountVO>}
   * @memberof DrinkingMeasurementReq
   */
  drinks: Array<DrinkingAmountVO>;
  /**
   * 술을 마신 시작 시간
   * @type {string}
   * @memberof DrinkingMeasurementReq
   */
  drinkingStartTime: string;
  /**
   * 술을 마신 종료 시간
   * @type {string}
   * @memberof DrinkingMeasurementReq
   */
  drinkingEndTime: string;
  /**
   * 총 마신 잔 수
   * @type {number}
   * @memberof DrinkingMeasurementReq
   */
  totalDrinkGlasses: number;
}
/**
 *
 * @export
 * @interface DrinkingMeasurementRes
 */
export interface DrinkingMeasurementRes {
  /**
   * 식별 id
   * @type {string}
   * @memberof DrinkingMeasurementRes
   */
  id: string;
  /**
   * 유저가 총 마신 술의 잔
   * @type {number}
   * @memberof DrinkingMeasurementRes
   */
  totalDrinkGlasses: number;
  /**
   * 유저가 마신 술의 평균 알콜 도수
   * @type {number}
   * @memberof DrinkingMeasurementRes
   */
  averageAlcoholContent: number;
  /**
   * 유저가 술을 마신 시간
   * @type {string}
   * @memberof DrinkingMeasurementRes
   */
  drinkingDuration: string;
  /**
   * 유저가 마신 술의 칼로리
   * @type {number}
   * @memberof DrinkingMeasurementRes
   */
  alcoholCalorie: number;
  /**
   * 유저가 마신 날짜
   * @type {string}
   * @memberof DrinkingMeasurementRes
   */
  drankAt: string;
  /**
   * 유저가 마신 술의 종류와 잔 수
   * @type {Array<Drinks>}
   * @memberof DrinkingMeasurementRes
   */
  drinks: Array<Drinks>;
}
/**
 *
 * @export
 * @interface DrinkingResultDto
 */
export interface DrinkingResultDto {
  /**
   *
   * @type {string}
   * @memberof DrinkingResultDto
   */
  drinkType: string;
  /**
   *
   * @type {number}
   * @memberof DrinkingResultDto
   */
  glasses: number;
}
/**
 * 유저가 마신 술의 종류와 잔 수
 * @export
 * @interface Drinks
 */
export interface Drinks {
  /**
   *
   * @type {string}
   * @memberof Drinks
   */
  drinkType: string;
  /**
   *
   * @type {number}
   * @memberof Drinks
   */
  glasses: number;
}
/**
 *
 * @export
 * @interface GetDrinkRes
 */
export interface GetDrinkRes {
  /**
   *
   * @type {Array<DrinkDto>}
   * @memberof GetDrinkRes
   */
  drinks: Array<DrinkDto>;
}
/**
 *
 * @export
 * @interface GetDrinkingCardsDto
 */
export interface GetDrinkingCardsDto {
  /**
   *
   * @type {Array<DrinkingCardDto>}
   * @memberof GetDrinkingCardsDto
   */
  cards: Array<DrinkingCardDto>;
}
/**
 * 주량등록 시, 보내야하는 Request Body
 * @export
 * @interface GetDrinkingLimitReq
 */
export interface GetDrinkingLimitReq {
  /**
   * 주종 이름
   * @type {string}
   * @memberof GetDrinkingLimitReq
   */
  drinkType: string;
  /**
   * 해당 주종을 몇 잔 마실 수 있는지 나타내는 필드
   * @type {number}
   * @memberof GetDrinkingLimitReq
   */
  glass: number;
}
/**
 *
 * @export
 * @interface GetTitleRes
 */
export interface GetTitleRes {
  /**
   *
   * @type {Array<TitleDto>}
   * @memberof GetTitleRes
   */
  titles: Array<TitleDto>;
}
/**
 * 주량등록 시, 보내야하는 Request Body
 * @export
 * @interface PostDrinkingLimitReq
 */
export interface PostDrinkingLimitReq {
  /**
   * 주종 이름
   * @type {string}
   * @memberof PostDrinkingLimitReq
   */
  drinkType: string;
  /**
   * 해당 주종을 몇 잔 마실 수 있는지 나타내는 필드
   * @type {number}
   * @memberof PostDrinkingLimitReq
   */
  glass: number;
}
/**
 *
 * @export
 * @interface TitleDto
 */
export interface TitleDto {
  /**
   *
   * @type {string}
   * @memberof TitleDto
   */
  titleText: string;
  /**
   *
   * @type {string}
   * @memberof TitleDto
   */
  subTitleText: string;
  /**
   *
   * @type {string}
   * @memberof TitleDto
   */
  badgeImageUrl: string;
  /**
   *
   * @type {string}
   * @memberof TitleDto
   */
  cardImageUrl: string;
  /**
   *
   * @type {number}
   * @memberof TitleDto
   */
  alcoholAmount: number;
}

/**
 * HealthControllerApi - axios parameter creator
 * @export
 */
export const HealthControllerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/health`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * HealthControllerApi - functional programming interface
 * @export
 */
export const HealthControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = HealthControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async health(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.health(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * HealthControllerApi - factory interface
 * @export
 */
export const HealthControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = HealthControllerApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    health(options?: any): AxiosPromise<object> {
      return localVarFp.health(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * HealthControllerApi - object-oriented interface
 * @export
 * @class HealthControllerApi
 * @extends {BaseAPI}
 */
export class HealthControllerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof HealthControllerApi
   */
  public health(options?: AxiosRequestConfig) {
    return HealthControllerApiFp(this.configuration)
      .health(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * MockAPI컨트롤러Api - axios parameter creator
 * @export
 */
export const MockAPI컨트롤러ApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 유저 주량으로 다양한 주종별 맥시멈 주량 조회 API (* response의 glass는 주종별 maxium glass 의미함
     * @summary 다른 주종별 주량 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDifferentDrinkingLimit: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/drinkingLimit/differentDrink`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 유저의 술약속 카드를 DB에서 조회합니다.
     * @summary 술약속 카드 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDrinkingCards: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/drinking/card`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * MockAPI컨트롤러Api - functional programming interface
 * @export
 */
export const MockAPI컨트롤러ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = MockAPI컨트롤러ApiAxiosParamCreator(configuration);
  return {
    /**
     * 유저 주량으로 다양한 주종별 맥시멈 주량 조회 API (* response의 glass는 주종별 maxium glass 의미함
     * @summary 다른 주종별 주량 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDifferentDrinkingLimit(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinkingLimitListDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDifferentDrinkingLimit(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 유저의 술약속 카드를 DB에서 조회합니다.
     * @summary 술약속 카드 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDrinkingCards(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDrinkingCardsDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDrinkingCards(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * MockAPI컨트롤러Api - factory interface
 * @export
 */
export const MockAPI컨트롤러ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = MockAPI컨트롤러ApiFp(configuration);
  return {
    /**
     * 유저 주량으로 다양한 주종별 맥시멈 주량 조회 API (* response의 glass는 주종별 maxium glass 의미함
     * @summary 다른 주종별 주량 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDifferentDrinkingLimit(options?: any): AxiosPromise<DrinkingLimitListDto> {
      return localVarFp
        .getDifferentDrinkingLimit(options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 유저의 술약속 카드를 DB에서 조회합니다.
     * @summary 술약속 카드 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDrinkingCards(options?: any): AxiosPromise<GetDrinkingCardsDto> {
      return localVarFp
        .getDrinkingCards(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * MockAPI컨트롤러Api - object-oriented interface
 * @export
 * @class MockAPI컨트롤러Api
 * @extends {BaseAPI}
 */
export class MockAPI컨트롤러Api extends BaseAPI {
  /**
   * 유저 주량으로 다양한 주종별 맥시멈 주량 조회 API (* response의 glass는 주종별 maxium glass 의미함
   * @summary 다른 주종별 주량 조회 API
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MockAPI컨트롤러Api
   */
  public getDifferentDrinkingLimit(options?: AxiosRequestConfig) {
    return MockAPI컨트롤러ApiFp(this.configuration)
      .getDifferentDrinkingLimit(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 유저의 술약속 카드를 DB에서 조회합니다.
   * @summary 술약속 카드 조회 API
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MockAPI컨트롤러Api
   */
  public getDrinkingCards(options?: AxiosRequestConfig) {
    return MockAPI컨트롤러ApiFp(this.configuration)
      .getDrinkingCards(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * 주량등록컨트롤러Api - axios parameter creator
 * @export
 */
export const 주량등록컨트롤러ApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 주량 조회할 때 호출하는 API
     * @summary 주량 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/drinkingLimit`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 로그인 없이, 주량을 등록할 때 호출하는 API. 해당 API 는 DB에 저장하지 않고 클라이언트로부터 받은 값으로 바로 값 계산해서 보여주는 프로세스를 가진다
     * @summary (공유) 주량 조회 API
     * @param {GetDrinkingLimitReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInShareMode: async (
      body: GetDrinkingLimitReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'body' is not null or undefined
      assertParamExists('getInShareMode', 'body', body);
      const localVarPath = `/api/v1/drinkingLimit/share`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (body !== undefined) {
        localVarQueryParameter['body'] = body;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 로그인 한 뒤, 토큰 정보와 같이 주량을 등록할 때 호출하는 API
     * @summary 주량 등록 API
     * @param {PostDrinkingLimitReq} postDrinkingLimitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    save1: async (
      postDrinkingLimitReq: PostDrinkingLimitReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postDrinkingLimitReq' is not null or undefined
      assertParamExists('save1', 'postDrinkingLimitReq', postDrinkingLimitReq);
      const localVarPath = `/api/v1/drinkingLimit`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postDrinkingLimitReq,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * 주량등록컨트롤러Api - functional programming interface
 * @export
 */
export const 주량등록컨트롤러ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = 주량등록컨트롤러ApiAxiosParamCreator(configuration);
  return {
    /**
     * 주량 조회할 때 호출하는 API
     * @summary 주량 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async get(
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinkingLimitRes>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.get(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 로그인 없이, 주량을 등록할 때 호출하는 API. 해당 API 는 DB에 저장하지 않고 클라이언트로부터 받은 값으로 바로 값 계산해서 보여주는 프로세스를 가진다
     * @summary (공유) 주량 조회 API
     * @param {GetDrinkingLimitReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getInShareMode(
      body: GetDrinkingLimitReq,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinkingLimitRes>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getInShareMode(
        body,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 로그인 한 뒤, 토큰 정보와 같이 주량을 등록할 때 호출하는 API
     * @summary 주량 등록 API
     * @param {PostDrinkingLimitReq} postDrinkingLimitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async save1(
      postDrinkingLimitReq: PostDrinkingLimitReq,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinkingLimitRes>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.save1(
        postDrinkingLimitReq,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * 주량등록컨트롤러Api - factory interface
 * @export
 */
export const 주량등록컨트롤러ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = 주량등록컨트롤러ApiFp(configuration);
  return {
    /**
     * 주량 조회할 때 호출하는 API
     * @summary 주량 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(options?: any): AxiosPromise<DrinkingLimitRes> {
      return localVarFp.get(options).then((request) => request(axios, basePath));
    },
    /**
     * 로그인 없이, 주량을 등록할 때 호출하는 API. 해당 API 는 DB에 저장하지 않고 클라이언트로부터 받은 값으로 바로 값 계산해서 보여주는 프로세스를 가진다
     * @summary (공유) 주량 조회 API
     * @param {GetDrinkingLimitReq} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInShareMode(
      body: GetDrinkingLimitReq,
      options?: any
    ): AxiosPromise<DrinkingLimitRes> {
      return localVarFp
        .getInShareMode(body, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 로그인 한 뒤, 토큰 정보와 같이 주량을 등록할 때 호출하는 API
     * @summary 주량 등록 API
     * @param {PostDrinkingLimitReq} postDrinkingLimitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    save1(
      postDrinkingLimitReq: PostDrinkingLimitReq,
      options?: any
    ): AxiosPromise<DrinkingLimitRes> {
      return localVarFp
        .save1(postDrinkingLimitReq, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * 주량등록컨트롤러Api - object-oriented interface
 * @export
 * @class 주량등록컨트롤러Api
 * @extends {BaseAPI}
 */
export class 주량등록컨트롤러Api extends BaseAPI {
  /**
   * 주량 조회할 때 호출하는 API
   * @summary 주량 조회 API
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 주량등록컨트롤러Api
   */
  public get(options?: AxiosRequestConfig) {
    return 주량등록컨트롤러ApiFp(this.configuration)
      .get(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 로그인 없이, 주량을 등록할 때 호출하는 API. 해당 API 는 DB에 저장하지 않고 클라이언트로부터 받은 값으로 바로 값 계산해서 보여주는 프로세스를 가진다
   * @summary (공유) 주량 조회 API
   * @param {GetDrinkingLimitReq} body
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 주량등록컨트롤러Api
   */
  public getInShareMode(body: GetDrinkingLimitReq, options?: AxiosRequestConfig) {
    return 주량등록컨트롤러ApiFp(this.configuration)
      .getInShareMode(body, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 로그인 한 뒤, 토큰 정보와 같이 주량을 등록할 때 호출하는 API
   * @summary 주량 등록 API
   * @param {PostDrinkingLimitReq} postDrinkingLimitReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 주량등록컨트롤러Api
   */
  public save1(postDrinkingLimitReq: PostDrinkingLimitReq, options?: AxiosRequestConfig) {
    return 주량등록컨트롤러ApiFp(this.configuration)
      .save1(postDrinkingLimitReq, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * 주량측정컨트롤러Api - axios parameter creator
 * @export
 */
export const 주량측정컨트롤러ApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 주량 측정 결과 조회 API
     * @param {string} reportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport: async (
      reportId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'reportId' is not null or undefined
      assertParamExists('getReport', 'reportId', reportId);
      const localVarPath = `/api/v1/drinkingReport/{reportId}`.replace(
        `{${'reportId'}}`,
        encodeURIComponent(String(reportId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 추량 측정 보고서 생성 API
     * @param {DrinkingMeasurementReq} drinkingMeasurementReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    save: async (
      drinkingMeasurementReq: DrinkingMeasurementReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'drinkingMeasurementReq' is not null or undefined
      assertParamExists('save', 'drinkingMeasurementReq', drinkingMeasurementReq);
      const localVarPath = `/api/v1/drinkingReport`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        drinkingMeasurementReq,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * 주량측정컨트롤러Api - functional programming interface
 * @export
 */
export const 주량측정컨트롤러ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = 주량측정컨트롤러ApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 주량 측정 결과 조회 API
     * @param {string} reportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getReport(
      reportId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinkingMeasurementRes>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getReport(
        reportId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 추량 측정 보고서 생성 API
     * @param {DrinkingMeasurementReq} drinkingMeasurementReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async save(
      drinkingMeasurementReq: DrinkingMeasurementReq,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinkingMeasurementRes>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.save(
        drinkingMeasurementReq,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * 주량측정컨트롤러Api - factory interface
 * @export
 */
export const 주량측정컨트롤러ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = 주량측정컨트롤러ApiFp(configuration);
  return {
    /**
     *
     * @summary 주량 측정 결과 조회 API
     * @param {string} reportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(reportId: string, options?: any): AxiosPromise<DrinkingMeasurementRes> {
      return localVarFp
        .getReport(reportId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 추량 측정 보고서 생성 API
     * @param {DrinkingMeasurementReq} drinkingMeasurementReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    save(
      drinkingMeasurementReq: DrinkingMeasurementReq,
      options?: any
    ): AxiosPromise<DrinkingMeasurementRes> {
      return localVarFp
        .save(drinkingMeasurementReq, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * 주량측정컨트롤러Api - object-oriented interface
 * @export
 * @class 주량측정컨트롤러Api
 * @extends {BaseAPI}
 */
export class 주량측정컨트롤러Api extends BaseAPI {
  /**
   *
   * @summary 주량 측정 결과 조회 API
   * @param {string} reportId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 주량측정컨트롤러Api
   */
  public getReport(reportId: string, options?: AxiosRequestConfig) {
    return 주량측정컨트롤러ApiFp(this.configuration)
      .getReport(reportId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 추량 측정 보고서 생성 API
   * @param {DrinkingMeasurementReq} drinkingMeasurementReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 주량측정컨트롤러Api
   */
  public save(
    drinkingMeasurementReq: DrinkingMeasurementReq,
    options?: AxiosRequestConfig
  ) {
    return 주량측정컨트롤러ApiFp(this.configuration)
      .save(drinkingMeasurementReq, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * 주종컨트롤러Api - axios parameter creator
 * @export
 */
export const 주종컨트롤러ApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * drink amount 단위: ml, alcohol amount 단위: g. 하단에 Schemas DrinkDto 참고
     * @summary 주종 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drink: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/drink`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * 주종컨트롤러Api - functional programming interface
 * @export
 */
export const 주종컨트롤러ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = 주종컨트롤러ApiAxiosParamCreator(configuration);
  return {
    /**
     * drink amount 단위: ml, alcohol amount 단위: g. 하단에 Schemas DrinkDto 참고
     * @summary 주종 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async drink(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDrinkRes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.drink(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * 주종컨트롤러Api - factory interface
 * @export
 */
export const 주종컨트롤러ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = 주종컨트롤러ApiFp(configuration);
  return {
    /**
     * drink amount 단위: ml, alcohol amount 단위: g. 하단에 Schemas DrinkDto 참고
     * @summary 주종 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drink(options?: any): AxiosPromise<GetDrinkRes> {
      return localVarFp.drink(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * 주종컨트롤러Api - object-oriented interface
 * @export
 * @class 주종컨트롤러Api
 * @extends {BaseAPI}
 */
export class 주종컨트롤러Api extends BaseAPI {
  /**
   * drink amount 단위: ml, alcohol amount 단위: g. 하단에 Schemas DrinkDto 참고
   * @summary 주종 조회 API
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 주종컨트롤러Api
   */
  public drink(options?: AxiosRequestConfig) {
    return 주종컨트롤러ApiFp(this.configuration)
      .drink(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * 칭호컨트롤러Api - axios parameter creator
 * @export
 */
export const 칭호컨트롤러ApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * 칭호를 제공합니다
     * @summary 칭호 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDrinkingLimitTitle: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/title`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * 칭호컨트롤러Api - functional programming interface
 * @export
 */
export const 칭호컨트롤러ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = 칭호컨트롤러ApiAxiosParamCreator(configuration);
  return {
    /**
     * 칭호를 제공합니다
     * @summary 칭호 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDrinkingLimitTitle(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTitleRes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getDrinkingLimitTitle(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * 칭호컨트롤러Api - factory interface
 * @export
 */
export const 칭호컨트롤러ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = 칭호컨트롤러ApiFp(configuration);
  return {
    /**
     * 칭호를 제공합니다
     * @summary 칭호 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDrinkingLimitTitle(options?: any): AxiosPromise<GetTitleRes> {
      return localVarFp
        .getDrinkingLimitTitle(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * 칭호컨트롤러Api - object-oriented interface
 * @export
 * @class 칭호컨트롤러Api
 * @extends {BaseAPI}
 */
export class 칭호컨트롤러Api extends BaseAPI {
  /**
   * 칭호를 제공합니다
   * @summary 칭호 조회 API
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 칭호컨트롤러Api
   */
  public getDrinkingLimitTitle(options?: AxiosRequestConfig) {
    return 칭호컨트롤러ApiFp(this.configuration)
      .getDrinkingLimitTitle(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
