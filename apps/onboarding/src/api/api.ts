/* tslint:disable */
/* eslint-disable */
/**
 * sulsul API
 * sulsul API Restdocs
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 *
 * @export
 * @interface DrinkListReq
 */
export interface DrinkListReq {
  /**
   *
   * @type {Array<DrinkReq>}
   * @memberof DrinkListReq
   */
  drinks: Array<DrinkReq>;
}
/**
 *
 * @export
 * @interface DrinkReq
 */
export interface DrinkReq {
  /**
   * 술의 종류
   * @type {string}
   * @memberof DrinkReq
   */
  drinkType: DrinkReqDrinkTypeEnum;
  /**
   *
   * @type {number}
   * @memberof DrinkReq
   */
  glass: number;
}

export const DrinkReqDrinkTypeEnum = {
  소주: '소주',
  와인: '와인',
  맥주: '맥주',
  위스키: '위스키',
  고량주: '고량주',
} as const;

export type DrinkReqDrinkTypeEnum =
  typeof DrinkReqDrinkTypeEnum[keyof typeof DrinkReqDrinkTypeEnum];

/**
 * 술 종류와 잔 수
 * @export
 * @interface DrinkingAmountVO
 */
export interface DrinkingAmountVO {
  /**
   *
   * @type {string}
   * @memberof DrinkingAmountVO
   */
  drinkType: string;
  /**
   *
   * @type {number}
   * @memberof DrinkingAmountVO
   */
  glasses: number;
}
/**
 *
 * @export
 * @interface DrinkingLimitDto
 */
export interface DrinkingLimitDto {
  /**
   * 술의 종류
   * @type {string}
   * @memberof DrinkingLimitDto
   */
  drinkType: DrinkingLimitDtoDrinkTypeEnum;
  /**
   *
   * @type {number}
   * @memberof DrinkingLimitDto
   */
  glass: number;
}

export const DrinkingLimitDtoDrinkTypeEnum = {
  소주: '소주',
  와인: '와인',
  맥주: '맥주',
  위스키: '위스키',
  고량주: '고량주',
} as const;

export type DrinkingLimitDtoDrinkTypeEnum =
  typeof DrinkingLimitDtoDrinkTypeEnum[keyof typeof DrinkingLimitDtoDrinkTypeEnum];

/**
 *
 * @export
 * @interface DrinkingMeasurementByClickRes
 */
export interface DrinkingMeasurementByClickRes {
  /**
   *
   * @type {DrinkingMeasurementTitleRes}
   * @memberof DrinkingMeasurementByClickRes
   */
  title: DrinkingMeasurementTitleRes;
  /**
   *
   * @type {boolean}
   * @memberof DrinkingMeasurementByClickRes
   */
  isDrunken: boolean;
}
/**
 *
 * @export
 * @interface DrinkingMeasurementListRes
 */
export interface DrinkingMeasurementListRes {
  /**
   * 주량 측정 결과 리스트
   * @type {Array<DrinkingMeasurementSummaryRes>}
   * @memberof DrinkingMeasurementListRes
   */
  cards: Array<DrinkingMeasurementSummaryRes>;
}
/**
 *
 * @export
 * @interface DrinkingMeasurementReq
 */
export interface DrinkingMeasurementReq {
  /**
   * 술 종류와 잔 수
   * @type {Array<DrinkingAmountVO>}
   * @memberof DrinkingMeasurementReq
   */
  drinks: Array<DrinkingAmountVO>;
  /**
   * 술을 마신 시작 시간
   * @type {string}
   * @memberof DrinkingMeasurementReq
   */
  drinkingStartTime: string;
  /**
   * 술을 마신 종료 시간
   * @type {string}
   * @memberof DrinkingMeasurementReq
   */
  drinkingEndTime: string;
  /**
   * 총 마신 잔 수
   * @type {number}
   * @memberof DrinkingMeasurementReq
   */
  totalDrinkGlasses: number;
}
/**
 *
 * @export
 * @interface DrinkingMeasurementRes
 */
export interface DrinkingMeasurementRes {
  /**
   * 식별 id
   * @type {string}
   * @memberof DrinkingMeasurementRes
   */
  id: string;
  /**
   * 유저가 총 마신 술의 잔
   * @type {number}
   * @memberof DrinkingMeasurementRes
   */
  totalDrinkGlasses: number;
  /**
   * 칭호
   * @type {string}
   * @memberof DrinkingMeasurementRes
   */
  title: string;
  /**
   * 카드 이미지 url
   * @type {string}
   * @memberof DrinkingMeasurementRes
   */
  drinkCardImageUrl: string;
  /**
   * 유저가 마신 술의 평균 알콜 도수
   * @type {number}
   * @memberof DrinkingMeasurementRes
   */
  averageAlcoholPercent: number;
  /**
   * 평균 주량보다 몇 잔 더 마셨는지 나타내는 필드
   * @type {number}
   * @memberof DrinkingMeasurementRes
   */
  extraGlasses: number;
  /**
   * 유저가 술을 마신 시간
   * @type {string}
   * @memberof DrinkingMeasurementRes
   */
  drinkingDuration: string;
  /**
   * 유저가 마신 술의 칼로리
   * @type {number}
   * @memberof DrinkingMeasurementRes
   */
  alcoholCalorie: number;
  /**
   * 유저가 마신 날짜
   * @type {string}
   * @memberof DrinkingMeasurementRes
   */
  drankAt: string;
  /**
   * 유저가 마신 술의 종류와 잔 수
   * @type {Array<Drinks>}
   * @memberof DrinkingMeasurementRes
   */
  drinks: Array<Drinks>;
}
/**
 * 주량 측정 결과 리스트
 * @export
 * @interface DrinkingMeasurementSummaryRes
 */
export interface DrinkingMeasurementSummaryRes {
  /**
   * 식별 id
   * @type {string}
   * @memberof DrinkingMeasurementSummaryRes
   */
  id: string;
  /**
   * 유저가 총 마신 알코올 양
   * @type {number}
   * @memberof DrinkingMeasurementSummaryRes
   */
  totalAlcoholAmount: number;
  /**
   * 유저가 총 마신 술의 잔
   * @type {number}
   * @memberof DrinkingMeasurementSummaryRes
   */
  totalDrinkGlasses: number;
  /**
   * 유저가 마신 날짜
   * @type {string}
   * @memberof DrinkingMeasurementSummaryRes
   */
  drankAt: string;
  /**
   * 유저가 마신 술의 종류와 잔 수
   * @type {Array<Drinks>}
   * @memberof DrinkingMeasurementSummaryRes
   */
  drinks: Array<Drinks>;
  /**
   * 칭호 이름
   * @type {string}
   * @memberof DrinkingMeasurementSummaryRes
   */
  subTitle: string;
}
/**
 *
 * @export
 * @interface DrinkingMeasurementTitleRes
 */
export interface DrinkingMeasurementTitleRes {
  /**
   *
   * @type {string}
   * @memberof DrinkingMeasurementTitleRes
   */
  text: string;
  /**
   *
   * @type {string}
   * @memberof DrinkingMeasurementTitleRes
   */
  imageUrl: string;
}
/**
 * 유저가 마신 술의 종류와 잔 수
 * @export
 * @interface Drinks
 */
export interface Drinks {
  /**
   *
   * @type {string}
   * @memberof Drinks
   */
  drinkType: string;
  /**
   *
   * @type {number}
   * @memberof Drinks
   */
  glasses: number;
}
/**
 *
 * @export
 * @interface GetDrinkRes
 */
export interface GetDrinkRes {
  /**
   * 술의 종류
   * @type {Array<string>}
   * @memberof GetDrinkRes
   */
  drinks: Array<string>;
}
/**
 *
 * @export
 * @interface MeRes
 */
export interface MeRes {
  /**
   *
   * @type {string}
   * @memberof MeRes
   */
  nickname: string;
  /**
   *
   * @type {Array<DrinkingLimitDto>}
   * @memberof MeRes
   */
  drinkingLimits?: Array<DrinkingLimitDto>;
  /**
   *
   * @type {TitleDto}
   * @memberof MeRes
   */
  title?: TitleDto;
}
/**
 * 주량등록 시, 보내야하는 Request Body
 * @export
 * @interface PostDrinkingLimitReq
 */
export interface PostDrinkingLimitReq {
  /**
   * 술의 종류
   * @type {string}
   * @memberof PostDrinkingLimitReq
   */
  drinkType: PostDrinkingLimitReqDrinkTypeEnum;
  /**
   * 해당 주종을 몇 잔 마실 수 있는지 나타내는 필드
   * @type {number}
   * @memberof PostDrinkingLimitReq
   */
  glass: number;
}

export const PostDrinkingLimitReqDrinkTypeEnum = {
  소주: '소주',
  와인: '와인',
  맥주: '맥주',
  위스키: '위스키',
  고량주: '고량주',
} as const;

export type PostDrinkingLimitReqDrinkTypeEnum =
  typeof PostDrinkingLimitReqDrinkTypeEnum[keyof typeof PostDrinkingLimitReqDrinkTypeEnum];

/**
 *
 * @export
 * @interface PostDrinkingLimitResDto
 */
export interface PostDrinkingLimitResDto {
  /**
   *
   * @type {Array<DrinkingLimitDto>}
   * @memberof PostDrinkingLimitResDto
   */
  drinks: Array<DrinkingLimitDto>;
  /**
   *
   * @type {TitleDto}
   * @memberof PostDrinkingLimitResDto
   */
  title: TitleDto;
}
/**
 *
 * @export
 * @interface TitleDto
 */
export interface TitleDto {
  /**
   *
   * @type {string}
   * @memberof TitleDto
   */
  title: TitleDtoTitleEnum;
  /**
   *
   * @type {string}
   * @memberof TitleDto
   */
  subTitle: TitleDtoSubTitleEnum;
  /**
   *
   * @type {string}
   * @memberof TitleDto
   */
  badgeImageUrl: string;
  /**
   *
   * @type {string}
   * @memberof TitleDto
   */
  cardImageUrl: string;
}

export const TitleDtoTitleEnum = {
  술요미: '술요미',
  술반인: '술반인',
  이쯤되면술잘알: '이쯤되면 술잘알',
  알낳괴: '알낳괴',
  음주가무천상계: '음주가무 천상계',
  AlcoholGod: 'Alcohol God',
} as const;

export type TitleDtoTitleEnum = typeof TitleDtoTitleEnum[keyof typeof TitleDtoTitleEnum];
export const TitleDtoSubTitleEnum = {
  귀엽네: '귀엽네',
  가자: '가자~',
  술좀치네: '술 좀 치네',
  미쳤다: '미쳤다',
  알콜마스터: '알콜 마스터',
  무서울게없다: '무서울 게 없다',
} as const;

export type TitleDtoSubTitleEnum =
  typeof TitleDtoSubTitleEnum[keyof typeof TitleDtoSubTitleEnum];

/**
 * AdminControllerApi - axios parameter creator
 * @export
 */
export const AdminControllerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDrinkingLimit: async (
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/admin/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * AdminControllerApi - functional programming interface
 * @export
 */
export const AdminControllerApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AdminControllerApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async removeDrinkingLimit(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.removeDrinkingLimit(
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * AdminControllerApi - factory interface
 * @export
 */
export const AdminControllerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = AdminControllerApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeDrinkingLimit(options?: any): AxiosPromise<void> {
      return localVarFp
        .removeDrinkingLimit(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * AdminControllerApi - object-oriented interface
 * @export
 * @class AdminControllerApi
 * @extends {BaseAPI}
 */
export class AdminControllerApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AdminControllerApi
   */
  public removeDrinkingLimit(options?: AxiosRequestConfig) {
    return AdminControllerApiFp(this.configuration)
      .removeDrinkingLimit(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * 유저컨트롤러Api - axios parameter creator
 * @export
 */
export const 유저컨트롤러ApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    me: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/user/me`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * 유저컨트롤러Api - functional programming interface
 * @export
 */
export const 유저컨트롤러ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = 유저컨트롤러ApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async me(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeRes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.me(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * 유저컨트롤러Api - factory interface
 * @export
 */
export const 유저컨트롤러ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = 유저컨트롤러ApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    me(options?: any): AxiosPromise<MeRes> {
      return localVarFp.me(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * 유저컨트롤러Api - object-oriented interface
 * @export
 * @class 유저컨트롤러Api
 * @extends {BaseAPI}
 */
export class 유저컨트롤러Api extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 유저컨트롤러Api
   */
  public me(options?: AxiosRequestConfig) {
    return 유저컨트롤러ApiFp(this.configuration)
      .me(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * 주량등록컨트롤러Api - axios parameter creator
 * @export
 */
export const 주량등록컨트롤러ApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 주량 조회할 때 호출하는 API
     * @summary 주량 조회 API
     * @param {string} drinkType
     * @param {number} glass
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get: async (
      drinkType: string,
      glass: number,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'drinkType' is not null or undefined
      assertParamExists('get', 'drinkType', drinkType);
      // verify required parameter 'glass' is not null or undefined
      assertParamExists('get', 'glass', glass);
      const localVarPath = `/api/v1/drinkingLimit`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      if (drinkType !== undefined) {
        localVarQueryParameter['drinkType'] = drinkType;
      }

      if (glass !== undefined) {
        localVarQueryParameter['glass'] = glass;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     * 로그인 한 뒤, 토큰 정보와 같이 주량을 등록할 때 호출하는 API
     * @summary 주량 등록 API
     * @param {PostDrinkingLimitReq} postDrinkingLimitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    save1: async (
      postDrinkingLimitReq: PostDrinkingLimitReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'postDrinkingLimitReq' is not null or undefined
      assertParamExists('save1', 'postDrinkingLimitReq', postDrinkingLimitReq);
      const localVarPath = `/api/v1/drinkingLimit`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        postDrinkingLimitReq,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * 주량등록컨트롤러Api - functional programming interface
 * @export
 */
export const 주량등록컨트롤러ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = 주량등록컨트롤러ApiAxiosParamCreator(configuration);
  return {
    /**
     * 주량 조회할 때 호출하는 API
     * @summary 주량 조회 API
     * @param {string} drinkType
     * @param {number} glass
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async get(
      drinkType: string,
      glass: number,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostDrinkingLimitResDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.get(
        drinkType,
        glass,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     * 로그인 한 뒤, 토큰 정보와 같이 주량을 등록할 때 호출하는 API
     * @summary 주량 등록 API
     * @param {PostDrinkingLimitReq} postDrinkingLimitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async save1(
      postDrinkingLimitReq: PostDrinkingLimitReq,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostDrinkingLimitResDto>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.save1(
        postDrinkingLimitReq,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * 주량등록컨트롤러Api - factory interface
 * @export
 */
export const 주량등록컨트롤러ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = 주량등록컨트롤러ApiFp(configuration);
  return {
    /**
     * 주량 조회할 때 호출하는 API
     * @summary 주량 조회 API
     * @param {string} drinkType
     * @param {number} glass
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    get(
      drinkType: string,
      glass: number,
      options?: any
    ): AxiosPromise<PostDrinkingLimitResDto> {
      return localVarFp
        .get(drinkType, glass, options)
        .then((request) => request(axios, basePath));
    },
    /**
     * 로그인 한 뒤, 토큰 정보와 같이 주량을 등록할 때 호출하는 API
     * @summary 주량 등록 API
     * @param {PostDrinkingLimitReq} postDrinkingLimitReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    save1(
      postDrinkingLimitReq: PostDrinkingLimitReq,
      options?: any
    ): AxiosPromise<PostDrinkingLimitResDto> {
      return localVarFp
        .save1(postDrinkingLimitReq, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * 주량등록컨트롤러Api - object-oriented interface
 * @export
 * @class 주량등록컨트롤러Api
 * @extends {BaseAPI}
 */
export class 주량등록컨트롤러Api extends BaseAPI {
  /**
   * 주량 조회할 때 호출하는 API
   * @summary 주량 조회 API
   * @param {string} drinkType
   * @param {number} glass
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 주량등록컨트롤러Api
   */
  public get(drinkType: string, glass: number, options?: AxiosRequestConfig) {
    return 주량등록컨트롤러ApiFp(this.configuration)
      .get(drinkType, glass, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   * 로그인 한 뒤, 토큰 정보와 같이 주량을 등록할 때 호출하는 API
   * @summary 주량 등록 API
   * @param {PostDrinkingLimitReq} postDrinkingLimitReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 주량등록컨트롤러Api
   */
  public save1(postDrinkingLimitReq: PostDrinkingLimitReq, options?: AxiosRequestConfig) {
    return 주량등록컨트롤러ApiFp(this.configuration)
      .save1(postDrinkingLimitReq, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * 주량측정컨트롤러Api - axios parameter creator
 * @export
 */
export const 주량측정컨트롤러ApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     *
     * @summary 주량측정 시, 클릭할 때마다 호출하는 API
     * @param {DrinkListReq} drinkListReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTemporaryReport: async (
      drinkListReq: DrinkListReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'drinkListReq' is not null or undefined
      assertParamExists('createTemporaryReport', 'drinkListReq', drinkListReq);
      const localVarPath = `/api/v1/drinkingReport/click-event`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        drinkListReq,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 주량 측정 결과 조회 API
     * @param {string} reportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport: async (
      reportId: string,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'reportId' is not null or undefined
      assertParamExists('getReport', 'reportId', reportId);
      const localVarPath = `/api/v1/drinkingReport/{reportId}`.replace(
        `{${'reportId'}}`,
        encodeURIComponent(String(reportId))
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 주량 측정 결과 리스트 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportList: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/drinkingReport`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary 추량 측정 보고서 생성 API
     * @param {DrinkingMeasurementReq} drinkingMeasurementReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    save: async (
      drinkingMeasurementReq: DrinkingMeasurementReq,
      options: AxiosRequestConfig = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'drinkingMeasurementReq' is not null or undefined
      assertParamExists('save', 'drinkingMeasurementReq', drinkingMeasurementReq);
      const localVarPath = `/api/v1/drinkingReport`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter['Content-Type'] = 'application/json';

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        drinkingMeasurementReq,
        localVarRequestOptions,
        configuration
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * 주량측정컨트롤러Api - functional programming interface
 * @export
 */
export const 주량측정컨트롤러ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = 주량측정컨트롤러ApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary 주량측정 시, 클릭할 때마다 호출하는 API
     * @param {DrinkListReq} drinkListReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createTemporaryReport(
      drinkListReq: DrinkListReq,
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DrinkingMeasurementByClickRes>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createTemporaryReport(
        drinkListReq,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 주량 측정 결과 조회 API
     * @param {string} reportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getReport(
      reportId: string,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinkingMeasurementRes>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getReport(
        reportId,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 주량 측정 결과 리스트 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getReportList(
      options?: AxiosRequestConfig
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<DrinkingMeasurementListRes>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getReportList(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
    /**
     *
     * @summary 추량 측정 보고서 생성 API
     * @param {DrinkingMeasurementReq} drinkingMeasurementReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async save(
      drinkingMeasurementReq: DrinkingMeasurementReq,
      options?: AxiosRequestConfig
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DrinkingMeasurementRes>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.save(
        drinkingMeasurementReq,
        options
      );
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * 주량측정컨트롤러Api - factory interface
 * @export
 */
export const 주량측정컨트롤러ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = 주량측정컨트롤러ApiFp(configuration);
  return {
    /**
     *
     * @summary 주량측정 시, 클릭할 때마다 호출하는 API
     * @param {DrinkListReq} drinkListReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTemporaryReport(
      drinkListReq: DrinkListReq,
      options?: any
    ): AxiosPromise<DrinkingMeasurementByClickRes> {
      return localVarFp
        .createTemporaryReport(drinkListReq, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 주량 측정 결과 조회 API
     * @param {string} reportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReport(reportId: string, options?: any): AxiosPromise<DrinkingMeasurementRes> {
      return localVarFp
        .getReport(reportId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 주량 측정 결과 리스트 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReportList(options?: any): AxiosPromise<DrinkingMeasurementListRes> {
      return localVarFp
        .getReportList(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary 추량 측정 보고서 생성 API
     * @param {DrinkingMeasurementReq} drinkingMeasurementReq
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    save(
      drinkingMeasurementReq: DrinkingMeasurementReq,
      options?: any
    ): AxiosPromise<DrinkingMeasurementRes> {
      return localVarFp
        .save(drinkingMeasurementReq, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * 주량측정컨트롤러Api - object-oriented interface
 * @export
 * @class 주량측정컨트롤러Api
 * @extends {BaseAPI}
 */
export class 주량측정컨트롤러Api extends BaseAPI {
  /**
   *
   * @summary 주량측정 시, 클릭할 때마다 호출하는 API
   * @param {DrinkListReq} drinkListReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 주량측정컨트롤러Api
   */
  public createTemporaryReport(drinkListReq: DrinkListReq, options?: AxiosRequestConfig) {
    return 주량측정컨트롤러ApiFp(this.configuration)
      .createTemporaryReport(drinkListReq, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 주량 측정 결과 조회 API
   * @param {string} reportId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 주량측정컨트롤러Api
   */
  public getReport(reportId: string, options?: AxiosRequestConfig) {
    return 주량측정컨트롤러ApiFp(this.configuration)
      .getReport(reportId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 주량 측정 결과 리스트 조회 API
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 주량측정컨트롤러Api
   */
  public getReportList(options?: AxiosRequestConfig) {
    return 주량측정컨트롤러ApiFp(this.configuration)
      .getReportList(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary 추량 측정 보고서 생성 API
   * @param {DrinkingMeasurementReq} drinkingMeasurementReq
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 주량측정컨트롤러Api
   */
  public save(
    drinkingMeasurementReq: DrinkingMeasurementReq,
    options?: AxiosRequestConfig
  ) {
    return 주량측정컨트롤러ApiFp(this.configuration)
      .save(drinkingMeasurementReq, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * 주종컨트롤러Api - axios parameter creator
 * @export
 */
export const 주종컨트롤러ApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     * drink amount 단위: ml, alcohol amount 단위: g. 하단에 Schemas DrinkDto 참고
     * @summary 주종 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drink: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/v1/drink`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication Authorization required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * 주종컨트롤러Api - functional programming interface
 * @export
 */
export const 주종컨트롤러ApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = 주종컨트롤러ApiAxiosParamCreator(configuration);
  return {
    /**
     * drink amount 단위: ml, alcohol amount 단위: g. 하단에 Schemas DrinkDto 참고
     * @summary 주종 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async drink(
      options?: AxiosRequestConfig
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDrinkRes>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.drink(options);
      return createRequestFunction(
        localVarAxiosArgs,
        globalAxios,
        BASE_PATH,
        configuration
      );
    },
  };
};

/**
 * 주종컨트롤러Api - factory interface
 * @export
 */
export const 주종컨트롤러ApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  const localVarFp = 주종컨트롤러ApiFp(configuration);
  return {
    /**
     * drink amount 단위: ml, alcohol amount 단위: g. 하단에 Schemas DrinkDto 참고
     * @summary 주종 조회 API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    drink(options?: any): AxiosPromise<GetDrinkRes> {
      return localVarFp.drink(options).then((request) => request(axios, basePath));
    },
  };
};

/**
 * 주종컨트롤러Api - object-oriented interface
 * @export
 * @class 주종컨트롤러Api
 * @extends {BaseAPI}
 */
export class 주종컨트롤러Api extends BaseAPI {
  /**
   * drink amount 단위: ml, alcohol amount 단위: g. 하단에 Schemas DrinkDto 참고
   * @summary 주종 조회 API
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof 주종컨트롤러Api
   */
  public drink(options?: AxiosRequestConfig) {
    return 주종컨트롤러ApiFp(this.configuration)
      .drink(options)
      .then((request) => request(this.axios, this.basePath));
  }
}
